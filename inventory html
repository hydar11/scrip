<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Inventory Manager</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }
        .header {
            text-align: center;
            margin-bottom: 40px;
        }
        .header h1 {
            color: #2c3e50;
            font-size: 2.5rem;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        .header p {
            color: #7f8c8d;
            font-size: 1.1rem;
        }
        .controls {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            border: 2px solid #e9ecef;
        }
        .object-types {
            margin-bottom: 20px;
        }
        .object-types h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.2rem;
        }
        .checkbox-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 10px;
            margin-bottom: 20px;
        }
        .checkbox-category {
            background: #f9f9f9;
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.05);
        }
        .checkbox-category h4 {
            margin-bottom: 10px;
            font-size: 1.1rem;
            color: #333;
        }
        .checkbox-item {
            display: flex;
            align-items: center;
            background: white;
            padding: 12px;
            border-radius: 8px;
            border: 2px solid transparent;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        .checkbox-item:hover {
            border-color: #667eea;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.2);
        }
        .checkbox-item input[type="checkbox"] {
            margin-right: 10px;
            transform: scale(1.2);
            accent-color: #667eea;
        }
        .checkbox-item.selected {
            border-color: #667eea;
            background: linear-gradient(135deg, #667eea10, #764ba210);
        }
        .action-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }
        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 25px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }
        .btn-secondary {
            background: #6c757d;
            color: white;
        }
        .btn-secondary:hover {
            background: #5a6268;
            transform: translateY(-2px);
        }
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        .loading {
            text-align: center;
            padding: 40px;
            color: #667eea;
        }
        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .results {
            margin-top: 30px;
        }
        .summary-table {
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }
        .table-header {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 20px;
            text-align: center;
        }
        .table-header h3 {
            font-size: 1.3rem;
            margin-bottom: 5px;
        }
        .table-header p {
            opacity: 0.9;
            font-size: 0.9rem;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #e9ecef;
        }
        th {
            background: #f8f9fa;
            font-weight: 600;
            color: #2c3e50;
            text-transform: uppercase;
            font-size: 0.85rem;
            letter-spacing: 0.5px;
        }
        tr:hover {
            background: #f8f9fa;
        }
        .expandable-row {
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .expandable-row:hover {
            background: #e3f2fd;
        }
        .expand-icon {
            display: inline-block;
            margin-right: 8px;
            transition: transform 0.3s ease;
            font-weight: bold;
            color: #667eea;
        }
        .expand-icon.expanded {
            transform: rotate(90deg);
        }
        .details-row {
            background: #f8f9fa;
            border-left: 4px solid #667eea;
        }
        .details-content {
            padding: 20px;
        }
        .contribution-item {
            background: white;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            border-left: 3px solid #28a745;
        }
        .contribution-item:last-child {
            margin-bottom: 0;
        }
        .contribution-header {
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 8px;
        }
        .contribution-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            font-size: 0.9rem;
            color: #6c757d;
        }
        .detail-item span {
            display: block;
        }
        .detail-label {
            font-weight: bold;
            color: #555;
        }
        .location-tag {
            background: #e3f2fd;
            color: #1976d2;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 0.8rem;
            font-family: monospace;
        }
        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #dc3545;
            margin: 20px 0;
        }
        .success {
            background: #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #28a745;
            margin: 20px 0;
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            text-align: center;
            border-top: 4px solid #667eea;
        }
        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 5px;
        }
        .stat-label {
            color: #6c757d;
            text-transform: uppercase;
            font-size: 0.85rem;
            letter-spacing: 0.5px;
        }
        @media (max-width: 768px) {
            .container {
                padding: 20px;
            }
            .checkbox-grid {
                grid-template-columns: 1fr;
            }
            .action-buttons {
                flex-direction: column;
            }
            th, td {
                padding: 10px;
                font-size: 0.9rem;
            }
            .contribution-details {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéÆ Inventory Manager</h1>
            <p>Select object types and analyze inventory distribution in real-time</p>
        </div>

        <div class="controls">
            <div class="object-types">
                <h3>Select Object Types</h3>
                <div class="checkbox-grid">
                    <!-- Resources -->
                    <div class="checkbox-category">
                        <h4>‚õèÔ∏è Resources</h4>
                        <div class="checkbox-item"><input type="checkbox" id="type114" value="114"><label for="type114">Coal Ore (114)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type115" value="115"><label for="type115">Copper Ore (115)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type116" value="116"><label for="type116">Iron Ore (116)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type32785" value="32785"><label for="type32785">Iron Bar (32785)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type117" value="117"><label for="type117">Gold Ore (117)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type32784" value="32784"><label for="type32784">Gold Bar (32784)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type118" value="118"><label for="type118">Diamond Ore (118)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type32786" value="32786"><label for="type32786">Diamond (32786)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type119" value="119"><label for="type119">Neptunium Ore (119)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type32787" value="32787"><label for="type32787">Neptunium (32787)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type140" value="140"><label for="type140">Sakura Sapling (140)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type61" value="61"><label for="type61">Sakura Leaf (61)</label></div>
                    </div>

                    <!-- Blocks -->
                    <div class="checkbox-category">
                        <h4>üß± Blocks</h4>
                        <div class="checkbox-item"><input type="checkbox" id="type129" value="129"><label for="type129">Copper Block (129)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type130" value="130"><label for="type130">Iron Block (130)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type131" value="131"><label for="type131">Gold Block (131)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type132" value="132"><label for="type132">Diamond Block (132)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type133" value="133"><label for="type133">Neptunium Block (133)</label></div>
                    </div>

                    <!-- Food -->
                    <div class="checkbox-category">
                        <h4>üçé Food</h4>
                        <div class="checkbox-item"><input type="checkbox" id="type92" value="92"><label for="type92">Wheat (92)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type94" value="94"><label for="type94">Pumpkin (94)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type95" value="95"><label for="type95">Melon (95)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type32790" value="32790"><label for="type32790">Wheat Slop (32790)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type32791" value="32791"><label for="type32791">Pumpkin Soup (32791)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type32792" value="32792"><label for="type32792">Melon Smoothie (32792)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type134" value="134"><label for="type134">Wheat Seed (134)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type135" value="135"><label for="type135">Pumpkin Seed (135)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type136" value="136"><label for="type136">Melon Seed (136)</label></div>
                    </div>

                    <!-- Future Foods -->
                    <div class="checkbox-category">
                        <h4>üå± Future Foods</h4>
                        <div class="checkbox-item"><input type="checkbox" id="type89" value="89"><label for="type89">Coffee Bush (89)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type90" value="90"><label for="type90">Strawberry Bush (90)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type91" value="91"><label for="type91">Raspberry Bush (91)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type87" value="87"><label for="type87">Golden Mushroom (87)</label></div>
                        <div class="checkbox-item"><input type="checkbox" id="type88" value="88"><label for="type88">Red Mushroom (88)</label></div>
                    </div>
                </div>
            </div>

            <div class="action-buttons">
                <button class="btn btn-primary" id="fetchDataBtn">üîÑ Fetch Inventory Data</button>
                <button class="btn btn-secondary" id="clearResultsBtn">üóëÔ∏è Clear Results</button>
            </div>
        </div>

        <div id="loadingSection" class="loading" style="display: none;">
            <div class="loading-spinner"></div>
            <h3>Fetching inventory data...</h3>
            <p>This may take a few moments</p>
        </div>

        <div id="resultsSection" class="results" style="display: none;">
            <div class="stats" id="statsSection"></div>
            <div class="summary-table">
                <div class="table-header">
                    <h3>Inventory Summary</h3>
                    <p>Click on any row to view detailed contributions</p>
                </div>
                <table id="summaryTable">
                    <thead>
                        <tr>
                            <th>Owner</th>
                            <th>Total Amount</th>
                            <th>Location</th>
                            <th>Details</th>
                        </tr>
                    </thead>
                    <tbody id="summaryTableBody"></tbody>
                </table>
            </div>
        </div>

        <div id="errorSection" style="display: none;"></div>
    </div>

    <script>
        const WORLD_ID = '0x253eb85B3C953bFE3827CC14a151262482E7189C';
        const API_URL = 'https://indexer.mud.redstonechain.com/q ';

        // Map final addresses to names
        const addressMap = {
            '0x012343343e71bb22ad492108b13681024232320000000000000000000000': 'th',
            '0x01244462354345453dd65378e03f8dc34500000000000000000000': 'tha'
        };

        let currentData = null;
        let expandedRows = new Set();

        document.addEventListener('DOMContentLoaded', function () {
            initializeEventListeners();
            const firstCheckbox = document.querySelector('input[type="checkbox"]');
            if (firstCheckbox) {
                firstCheckbox.checked = true;
                updateCheckboxStyles();
            }
        });

        function initializeEventListeners() {
            document.querySelectorAll('.checkbox-item').forEach(item => {
                const checkbox = item.querySelector('input[type="checkbox"]');
                checkbox.addEventListener('change', updateCheckboxStyles);
                item.addEventListener('click', function (e) {
                    if (e.target !== checkbox) {
                        checkbox.checked = !checkbox.checked;
                        updateCheckboxStyles();
                    }
                });
            });
            document.getElementById('fetchDataBtn').addEventListener('click', fetchInventoryData);
            document.getElementById('clearResultsBtn').addEventListener('click', clearResults);
        }

        function updateCheckboxStyles() {
            document.querySelectorAll('.checkbox-item').forEach(item => {
                const checkbox = item.querySelector('input[type="checkbox"]');
                if (checkbox.checked) {
                    item.classList.add('selected');
                } else {
                    item.classList.remove('selected');
                }
            });
        }

        async function fetchInventoryData() {
            const selectedTypes = getSelectedObjectTypes();
            if (selectedTypes.length === 0) {
                showError('Please select at least one object type.');
                return;
            }
            showLoading(true);
            hideError();
            try {
                const [inventoryData, groupData, ownerData, positionData] = await Promise.all([
                    fetchInventoryByTypes(selectedTypes),
                    fetchGroupData(),
                    fetchOwnerData(),
                    fetchPositionData()
                ]);
                const processedData = processInventoryData(inventoryData, groupData, ownerData, positionData);
                currentData = processedData;
                displayResults(processedData, selectedTypes);
            } catch (error) {
                console.error('Error fetching data:', error);
                showError(`Failed to fetch inventory data: ${error.message}`);
            } finally {
                showLoading(false);
            }
        }

        function getSelectedObjectTypes() {
            const checkboxes = document.querySelectorAll('input[type="checkbox"]:checked');
            return Array.from(checkboxes).map(cb => parseInt(cb.value));
        }

        async function fetchInventoryByTypes(objectTypes) {
            const conditions = objectTypes.map(ot => `"objectType" = ${ot}`);
            const whereClause = conditions.join(' OR ');
            const sql = `SELECT "owner", sum("amount") as amount FROM "InventorySlot" WHERE ${whereClause} GROUP BY "owner" LIMIT ALL`;
            const query = [{ address: WORLD_ID, query: sql }];
            const response = await fetch(API_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                body: JSON.stringify(query)
            });
            if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            const data = await response.json();
            if (!data.result || !data.result[0]) throw new Error('No inventory data found');
            return data.result[0];
        }

        async function fetchGroupData() {
            const sql = `SELECT "entityId", "groupId" FROM "dfprograms_1__EntityAccessGrou" LIMIT all`;
            return await fetchGenericData(sql, 'group');
        }

        async function fetchOwnerData() {
            const sql = `SELECT "groupId", "owner" FROM "dfprograms_1__AccessGroupOwner" LIMIT all`;
            return await fetchGenericData(sql, 'owner');
        }

        async function fetchPositionData() {
            const sql = `SELECT "entityId", "x", "y", "z" FROM "EntityPosition" LIMIT all`;
            return await fetchGenericData(sql, 'position');
        }

        async function fetchGenericData(sql, type) {
            const query = [{ address: WORLD_ID, query: sql }];
            const response = await fetch(API_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                body: JSON.stringify(query)
            });
            if (!response.ok) throw new Error(`Failed to fetch ${type} data`);
            const data = await response.json();
            return data.result && data.result[0] ? data.result[0] : [];
        }

        function processInventoryData(inventoryData, groupData, ownerData, positionData) {
            const groupMap = new Map();
            if (groupData.length > 1) {
                const header = groupData[0];
                const entityIdx = header.indexOf('entityId');
                const groupIdx = header.indexOf('groupId');
                for (let i = 1; i < groupData.length; i++) {
                    const row = groupData[i];
                    if (row.length > Math.max(entityIdx, groupIdx)) {
                        groupMap.set(row[entityIdx], row[groupIdx]);
                    }
                }
            }

            const ownerMap = new Map();
            if (ownerData.length > 1) {
                const header = ownerData[0];
                const groupIdx = header.indexOf('groupId');
                const ownerIdx = header.indexOf('owner');
                for (let i = 1; i < ownerData.length; i++) {
                    const row = ownerData[i];
                    if (row.length > Math.max(groupIdx, ownerIdx)) {
                        ownerMap.set(row[groupIdx], row[ownerIdx]);
                    }
                }
            }

            const positionMap = new Map();
            if (positionData.length > 1) {
                const header = positionData[0];
                const entityIdx = header.indexOf('entityId');
                const xIdx = header.indexOf('x');
                const yIdx = header.indexOf('y');
                const zIdx = header.indexOf('z');
                for (let i = 1; i < positionData.length; i++) {
                    const row = positionData[i];
                    if (row.length > Math.max(entityIdx, xIdx, yIdx, zIdx)) {
                        positionMap.set(row[entityIdx], [row[xIdx], row[yIdx], row[zIdx]]);
                    }
                }
            }

            const summary = new Map();
            const detailed = new Map();
            const header = inventoryData[0];
            const ownerIdx = header.indexOf('owner');
            const amountIdx = header.indexOf('amount');

            for (let i = 1; i < inventoryData.length; i++) {
                const row = inventoryData[i];
                if (row.length <= Math.max(ownerIdx, amountIdx)) continue;
                const owner = row[ownerIdx];
                const amount = parseFloat(row[amountIdx]) || 0;
                let finalOwner = owner;

                let groupId = null;
                let coordinates = positionMap.get(owner) || null;

                if (owner.startsWith('0x01')) {
                    finalOwner = owner;
                } else if (owner.startsWith('0x03')) {
                    groupId = groupMap.get(owner);
                    finalOwner = ownerMap.get(groupId) || 'FREE';
                    if (!coordinates && groupId) coordinates = positionMap.get(groupId);
                    if (coordinates && finalOwner === 'FREE') {
                        finalOwner = `FREE [${coordinates[0]}, ${coordinates[1]}, ${coordinates[2]}]`;
                    }
                } else {
                    finalOwner = 'UNKNOWN';
                }

                if (addressMap[finalOwner]) {
                    finalOwner = `${addressMap[finalOwner]} (${finalOwner})`;
                }

                summary.set(finalOwner, (summary.get(finalOwner) || 0) + amount);
                if (!detailed.has(finalOwner)) detailed.set(finalOwner, []);
                detailed.get(finalOwner).push({ original_owner: owner, amount, groupId, location: coordinates });
            }

            const sortedSummary = Array.from(summary.entries()).sort((a, b) => b[1] - a[1]);

            return {
                summary: sortedSummary,
                detailed: detailed,
                stats: {
                    totalEntries: inventoryData.length - 1,
                    uniqueOwners: sortedSummary.length,
                    totalAmount: Array.from(summary.values()).reduce((a, b) => a + b, 0),
                    withCoordinates: Array.from(detailed.values()).flat().filter(d => d.location).length
                }
            };
        }

        function displayResults(data, objectTypes) {
            displayStats(data.stats, objectTypes);
            displaySummaryTable(data.summary, data.detailed);
            document.getElementById('resultsSection').style.display = 'block';
        }

        function displayStats(stats, objectTypes) {
            const statsSection = document.getElementById('statsSection');
            statsSection.innerHTML = `
                <div class="stat-card">
                    <div class="stat-number">${stats.totalEntries}</div>
                    <div class="stat-label">Total Entries</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${stats.uniqueOwners}</div>
                    <div class="stat-label">Unique Owners</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${stats.totalAmount.toLocaleString()}</div>
                    <div class="stat-label">Total Amount</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${stats.withCoordinates}</div>
                    <div class="stat-label">With Coordinates</div>
                </div>
            `;
        }

        function displaySummaryTable(summary, detailed) {
            const tbody = document.getElementById('summaryTableBody');
            tbody.innerHTML = '';
            summary.forEach(([owner, totalAmount], index) => {
                const contributions = detailed.get(owner) || [];
                const hasLocation = contributions.some(c => c.location);
                const firstLocation = contributions.find(c => c.location)?.location;
                const locationStr = firstLocation ?
                    `[${firstLocation[0]}, ${firstLocation[1]}, ${firstLocation[2]}]` : '';
                const row = document.createElement('tr');
                row.className = 'expandable-row';
                row.innerHTML = `
                    <td><span class="expand-icon">‚ñ∂</span>${owner}</td>
                    <td>${totalAmount.toLocaleString()}</td>
                    <td>${locationStr ? `<span class="location-tag">${locationStr}</span>` : ''}</td>
                    <td>${contributions.length} contribution${contributions.length !== 1 ? 's' : ''}</td>`;
                row.addEventListener('click', () => toggleRowDetails(row, owner, contributions, index));
                tbody.appendChild(row);
            });
        }

        function toggleRowDetails(row, owner, contributions, index) {
            const expandIcon = row.querySelector('.expand-icon');
            const existingDetailsRow = row.nextElementSibling;
            if (existingDetailsRow && existingDetailsRow.classList.contains('details-row')) {
                existingDetailsRow.remove();
                expandIcon.classList.remove('expanded');
                expandedRows.delete(index);
            } else {
                const detailsRow = document.createElement('tr');
                detailsRow.className = 'details-row';
                detailsRow.innerHTML = `
                    <td colspan="4">
                        <div class="details-content">
                            <h4>Contributions for ${owner}</h4>
                            ${contributions.map(contrib => `
                                <div class="contribution-item">
                                    <div class="contribution-header">Original Owner: ${contrib.original_owner}</div>
                                    <div class="contribution-details">
                                        <div class="detail-item"><span class="detail-label">Amount:</span><span>${contrib.amount.toLocaleString()}</span></div>
                                        <div class="detail-item"><span class="detail-label">Group ID:</span><span>${contrib.groupId || 'N/A'}</span></div>
                                        <div class="detail-item"><span class="detail-label">Location:</span><span>${contrib.location ? 
                                            `<span class="location-tag">[${contrib.location[0]}, ${contrib.location[1]}, ${contrib.location[2]}]</span>` : 'N/A'}</span></div>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </td>`;
                row.insertAdjacentElement('afterend', detailsRow);
                expandIcon.classList.add('expanded');
                expandedRows.add(index);
            }
        }

        function showLoading(show) {
            document.getElementById('loadingSection').style.display = show ? 'block' : 'none';
            document.getElementById('fetchDataBtn').disabled = show;
        }

        function showError(message) {
            const errorSection = document.getElementById('errorSection');
            errorSection.innerHTML = `<div class="error">‚ùå ${message}</div>`;
            errorSection.style.display = 'block';
        }

        function hideError() {
            document.getElementById('errorSection').style.display = 'none';
        }

        function clearResults() {
            document.getElementById('resultsSection').style.display = 'none';
            document.getElementById('summaryTableBody').innerHTML = '';
            document.getElementById('statsSection').innerHTML = '';
            currentData = null;
            expandedRows.clear();
            hideError();
        }
    </script>
</body>
</html>
